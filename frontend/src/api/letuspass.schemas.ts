/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * LetusPass REST API
 * Project description at https://github.com/berk-karaal/letuspass
 * OpenAPI spec version: 0.0.1
 */
export type ListVaultItemsOrdering =
  (typeof ListVaultItemsOrdering)[keyof typeof ListVaultItemsOrdering];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListVaultItemsOrdering = {
  title: "title",
  "-title": "-title",
  created_at: "created_at",
  "-created_at": "-created_at",
} as const;

export type ListVaultItemsParams = {
  /**
   * Page number
   */
  page?: number;
  /**
   * Item count per page
   */
  page_size?: number;
  /**
   * Ordering
   */
  ordering?: ListVaultItemsOrdering;
};

export type ListVaultsOrdering =
  (typeof ListVaultsOrdering)[keyof typeof ListVaultsOrdering];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListVaultsOrdering = {
  name: "name",
  "-name": "-name",
  created_at: "created_at",
  "-created_at": "-created_at",
} as const;

export type ListVaultsParams = {
  /**
   * Page number
   */
  page?: number;
  /**
   * Item count per page
   */
  page_size?: number;
  /**
   * Ordering
   */
  ordering?: ListVaultsOrdering;
};

export interface SchemasNotFoundResponse {
  error: string;
}

export interface SchemasBadRequestResponse {
  error: string;
}

export interface PaginationStandardPaginationResponseControllersHandleVaultsListVaultResponseItem {
  count: number;
  results: ControllersHandleVaultsListVaultResponseItem[];
}

export interface PaginationStandardPaginationResponseControllersHandleVaultItemsListVaultItemResponseItem {
  count: number;
  results: ControllersHandleVaultItemsListVaultItemResponseItem[];
}

export interface ControllersHandleVaultsManageRemoveUserRemoveUserRequest {
  user_id: number;
}

export interface ControllersHandleVaultsManageListUsersUsersResponseItem {
  email: string;
  permissions: string[];
}

export interface ControllersHandleVaultsManageAddUserAddUserRequest {
  email: string;
  permissions: string[];
}

export interface ControllersHandleVaultsListVaultResponseItem {
  created_at: string;
  id: number;
  name: string;
  updated_at: string;
}

export interface ControllersHandleVaultsCreateVaultCreateResponse {
  id: number;
  name: string;
}

export interface ControllersHandleVaultsCreateVaultCreateRequest {
  name: string;
}

export interface ControllersHandleVaultItemsUpdateVaultItemUpdateResponse {
  encrypted_note: string;
  encrypted_password: string;
  encrypted_username: string;
  id: number;
  title: string;
}

export interface ControllersHandleVaultItemsUpdateVaultItemUpdateRequest {
  encrypted_note?: string;
  encrypted_password?: string;
  encrypted_username?: string;
  title: string;
}

export interface ControllersHandleVaultItemsRetrieveVaultItemRetrieveResponse {
  encrypted_note: string;
  encrypted_password: string;
  encrypted_username: string;
  id: number;
  title: string;
}

export interface ControllersHandleVaultItemsListVaultItemResponseItem {
  id: number;
  title: string;
}

export interface ControllersHandleVaultItemsCreateVaultItemCreateResponse {
  encrypted_note: string;
  encrypted_password: string;
  encrypted_username: string;
  id: number;
  title: string;
}

export interface ControllersHandleVaultItemsCreateVaultItemCreateRequest {
  encrypted_note?: string;
  encrypted_password?: string;
  encrypted_username?: string;
  title: string;
}

export interface ControllersHandleUsersMeMeResponse {
  email: string;
  name: string;
}

export interface ControllersHandleMetricsStatusMetricsStatusResponse {
  status: string;
}

export interface ControllersHandleAuthRegisterRegisterRequest {
  email: string;
  name: string;
  password: string;
}

export interface ControllersHandleAuthLoginLoginResponse {
  email: string;
  name: string;
}

export interface ControllersHandleAuthLoginLoginRequest {
  email: string;
  password: string;
}

export interface BodybinderValidationErrorResponseItem {
  field: string;
  reason: string;
}

export interface BodybinderValidationErrorResponse {
  errors: BodybinderValidationErrorResponseItem[];
}
