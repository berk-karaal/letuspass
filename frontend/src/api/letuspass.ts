/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * LetusPass REST API
 * Project description at https://github.com/berk-karaal/letuspass
 * OpenAPI spec version: 0.0.1
 */
import type {
  ControllersHandleAuthLoginLoginRequest,
  ControllersHandleAuthLoginLoginResponse,
  ControllersHandleAuthRegisterRegisterRequest,
  ControllersHandleGetUserByEmailUserResponse,
  ControllersHandleMetricsStatusMetricsStatusResponse,
  ControllersHandleUsersMeMeResponse,
  ControllersHandleVaultItemsCreateVaultItemCreateRequest,
  ControllersHandleVaultItemsCreateVaultItemCreateResponse,
  ControllersHandleVaultItemsRetrieveVaultItemRetrieveResponse,
  ControllersHandleVaultItemsUpdateVaultItemUpdateRequest,
  ControllersHandleVaultItemsUpdateVaultItemUpdateResponse,
  ControllersHandleVaultsCreateVaultCreateRequest,
  ControllersHandleVaultsCreateVaultCreateResponse,
  ControllersHandleVaultsManageAddUserAddUserRequest,
  ControllersHandleVaultsManageListUsersUsersResponseItem,
  ControllersHandleVaultsManageRemoveUserRemoveUserRequest,
  ControllersHandleVaultsManageRenameRenameVaultRequest,
  ControllersHandleVaultsManageRenameRenameVaultResponse,
  ControllersHandleVaultsMyKeyVaultKeyResponse,
  GetUserByEmailParams,
  ListVaultAuditLogsParams,
  ListVaultItemsParams,
  ListVaultsParams,
  PaginationStandardPaginationResponseControllersHandleVaultAuditLogsListAuditLogResponseItem,
  PaginationStandardPaginationResponseControllersHandleVaultItemsListVaultItemResponseItem,
  PaginationStandardPaginationResponseControllersHandleVaultsListVaultResponseItem,
} from "./letuspass.schemas";
import { customInstance } from "./mutator/custom-instance";
import type { BodyType } from "./mutator/custom-instance";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Login user
 */
export const authLogin = (
  controllersHandleAuthLoginLoginRequest: BodyType<ControllersHandleAuthLoginLoginRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ControllersHandleAuthLoginLoginResponse>(
    {
      url: `/auth/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: controllersHandleAuthLoginLoginRequest,
    },
    options,
  );
};

/**
 * @summary Logout user
 */
export const authLogout = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>({ url: `/auth/logout`, method: "POST" }, options);
};

/**
 * @summary Register user
 */
export const authRegister = (
  controllersHandleAuthRegisterRegisterRequest: BodyType<ControllersHandleAuthRegisterRegisterRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/auth/register`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: controllersHandleAuthRegisterRegisterRequest,
    },
    options,
  );
};

/**
 * @summary Get status of the server
 */
export const getServerStatus = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ControllersHandleMetricsStatusMetricsStatusResponse>(
    { url: `/metrics/status`, method: "GET" },
    options,
  );
};

/**
 * @summary Get user by email
 */
export const getUserByEmail = (
  params: GetUserByEmailParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ControllersHandleGetUserByEmailUserResponse>(
    { url: `/users/by-email`, method: "GET", params },
    options,
  );
};

/**
 * @summary Get currently logged-in user
 */
export const getCurrentUser = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ControllersHandleUsersMeMeResponse>(
    { url: `/users/me`, method: "GET" },
    options,
  );
};

/**
 * @summary List vaults that user has read access to
 */
export const listVaults = (
  params?: ListVaultsParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PaginationStandardPaginationResponseControllersHandleVaultsListVaultResponseItem>(
    { url: `/vaults`, method: "GET", params },
    options,
  );
};

/**
 * @summary Create a new vault
 */
export const createVault = (
  controllersHandleVaultsCreateVaultCreateRequest: BodyType<ControllersHandleVaultsCreateVaultCreateRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ControllersHandleVaultsCreateVaultCreateResponse>(
    {
      url: `/vaults`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: controllersHandleVaultsCreateVaultCreateRequest,
    },
    options,
  );
};

/**
 * @summary Retrieve vault by id
 */
export const retrieveVault = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ControllersHandleVaultsCreateVaultCreateResponse>(
    { url: `/vaults/${id}`, method: "GET" },
    options,
  );
};

/**
 * @summary Delete vault by id
 */
export const deleteVault = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/vaults/${id}`, method: "DELETE" },
    options,
  );
};

/**
 * @summary List items of a vault
 */
export const listVaultItems = (
  id: number,
  params?: ListVaultItemsParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PaginationStandardPaginationResponseControllersHandleVaultItemsListVaultItemResponseItem>(
    { url: `/vaults/${id}/items`, method: "GET", params },
    options,
  );
};

/**
 * @summary Create a new vault item
 */
export const createVaultItem = (
  id: number,
  controllersHandleVaultItemsCreateVaultItemCreateRequest: BodyType<ControllersHandleVaultItemsCreateVaultItemCreateRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ControllersHandleVaultItemsCreateVaultItemCreateResponse>(
    {
      url: `/vaults/${id}/items`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: controllersHandleVaultItemsCreateVaultItemCreateRequest,
    },
    options,
  );
};

/**
 * @summary Retrieve a new vault item
 */
export const retrieveVaultItem = (
  id: number,
  itemId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ControllersHandleVaultItemsRetrieveVaultItemRetrieveResponse>(
    { url: `/vaults/${id}/items/${itemId}`, method: "GET" },
    options,
  );
};

/**
 * @summary Update a new vault item
 */
export const updateVaultItem = (
  id: number,
  itemId: number,
  controllersHandleVaultItemsUpdateVaultItemUpdateRequest: BodyType<ControllersHandleVaultItemsUpdateVaultItemUpdateRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ControllersHandleVaultItemsUpdateVaultItemUpdateResponse>(
    {
      url: `/vaults/${id}/items/${itemId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: controllersHandleVaultItemsUpdateVaultItemUpdateRequest,
    },
    options,
  );
};

/**
 * @summary Delete a vault item
 */
export const deleteVaultItem = (
  id: number,
  itemId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/vaults/${id}/items/${itemId}`, method: "DELETE" },
    options,
  );
};

/**
 * @summary Retrieve current user's vault key record for the vault
 */
export const retrieveMyVaultKey = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ControllersHandleVaultsMyKeyVaultKeyResponse>(
    { url: `/vaults/${id}/key`, method: "GET" },
    options,
  );
};

/**
 * @summary Leave from the vault
 */
export const leaveVault = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/vaults/${id}/leave`, method: "POST" },
    options,
  );
};

/**
 * @summary List audit logs of vault
 */
export const listVaultAuditLogs = (
  id: number,
  params?: ListVaultAuditLogsParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PaginationStandardPaginationResponseControllersHandleVaultAuditLogsListAuditLogResponseItem>(
    { url: `/vaults/${id}/logs`, method: "GET", params },
    options,
  );
};

/**
 * @summary Add user to vault
 */
export const addUserToVault = (
  id: number,
  controllersHandleVaultsManageAddUserAddUserRequest: BodyType<ControllersHandleVaultsManageAddUserAddUserRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/vaults/${id}/manage/add-user`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: controllersHandleVaultsManageAddUserAddUserRequest,
    },
    options,
  );
};

/**
 * @summary Rename vault
 */
export const renameVault = (
  id: number,
  controllersHandleVaultsManageRenameRenameVaultRequest: BodyType<ControllersHandleVaultsManageRenameRenameVaultRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ControllersHandleVaultsManageRenameRenameVaultResponse>(
    {
      url: `/vaults/${id}/manage/rename`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: controllersHandleVaultsManageRenameRenameVaultRequest,
    },
    options,
  );
};

/**
 * @summary List users who have access to vault
 */
export const listVaultUsers = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<
    ControllersHandleVaultsManageListUsersUsersResponseItem[]
  >({ url: `/vaults/${id}/manage/users`, method: "GET" }, options);
};

/**
 * @summary Remove user from vault
 */
export const removeUserFromVault = (
  id: number,
  controllersHandleVaultsManageRemoveUserRemoveUserRequest: BodyType<ControllersHandleVaultsManageRemoveUserRemoveUserRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/vaults/${id}/manage/users`,
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
      data: controllersHandleVaultsManageRemoveUserRemoveUserRequest,
    },
    options,
  );
};

/**
 * @summary List current user's permission on vault
 */
export const listMyVaultPermissions = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string[]>(
    { url: `/vaults/${id}/my-permissions`, method: "GET" },
    options,
  );
};

export type AuthLoginResult = NonNullable<
  Awaited<ReturnType<typeof authLogin>>
>;
export type AuthLogoutResult = NonNullable<
  Awaited<ReturnType<typeof authLogout>>
>;
export type AuthRegisterResult = NonNullable<
  Awaited<ReturnType<typeof authRegister>>
>;
export type GetServerStatusResult = NonNullable<
  Awaited<ReturnType<typeof getServerStatus>>
>;
export type GetUserByEmailResult = NonNullable<
  Awaited<ReturnType<typeof getUserByEmail>>
>;
export type GetCurrentUserResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentUser>>
>;
export type ListVaultsResult = NonNullable<
  Awaited<ReturnType<typeof listVaults>>
>;
export type CreateVaultResult = NonNullable<
  Awaited<ReturnType<typeof createVault>>
>;
export type RetrieveVaultResult = NonNullable<
  Awaited<ReturnType<typeof retrieveVault>>
>;
export type DeleteVaultResult = NonNullable<
  Awaited<ReturnType<typeof deleteVault>>
>;
export type ListVaultItemsResult = NonNullable<
  Awaited<ReturnType<typeof listVaultItems>>
>;
export type CreateVaultItemResult = NonNullable<
  Awaited<ReturnType<typeof createVaultItem>>
>;
export type RetrieveVaultItemResult = NonNullable<
  Awaited<ReturnType<typeof retrieveVaultItem>>
>;
export type UpdateVaultItemResult = NonNullable<
  Awaited<ReturnType<typeof updateVaultItem>>
>;
export type DeleteVaultItemResult = NonNullable<
  Awaited<ReturnType<typeof deleteVaultItem>>
>;
export type RetrieveMyVaultKeyResult = NonNullable<
  Awaited<ReturnType<typeof retrieveMyVaultKey>>
>;
export type LeaveVaultResult = NonNullable<
  Awaited<ReturnType<typeof leaveVault>>
>;
export type ListVaultAuditLogsResult = NonNullable<
  Awaited<ReturnType<typeof listVaultAuditLogs>>
>;
export type AddUserToVaultResult = NonNullable<
  Awaited<ReturnType<typeof addUserToVault>>
>;
export type RenameVaultResult = NonNullable<
  Awaited<ReturnType<typeof renameVault>>
>;
export type ListVaultUsersResult = NonNullable<
  Awaited<ReturnType<typeof listVaultUsers>>
>;
export type RemoveUserFromVaultResult = NonNullable<
  Awaited<ReturnType<typeof removeUserFromVault>>
>;
export type ListMyVaultPermissionsResult = NonNullable<
  Awaited<ReturnType<typeof listMyVaultPermissions>>
>;
